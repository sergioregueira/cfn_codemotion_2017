# 03.yaml - Cloudformation Tutorial - Ticketea training material
#
# Template topics:
# - Create two webservers and connect them to an ELB
# - Output now point to the DNS name of the ELB
# - ELB's DNS record propagation can take a few minutes
#
AWSTemplateFormatVersion: 2010-09-09

Description: Elastic Load balanacer with two webservers

Parameters:
    SSHKey:
        Description: The SSH Key that will be used to connect to our instance
        Type: AWS::EC2::KeyPair::KeyName  # see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
    AllowConnectionFrom:
        Description: Allow ssh connection from this specific CIDR range (eg. 1.2.3.4/32)
        Type: String
        AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})' # eg. 1.1.1.1/32
        ConstraintDescription: Must be a valid CIDR

Resources:
    PublicSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: SG rules to apply within the public subnets
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: !Ref AllowConnectionFrom
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0

    MyInstance1:
        Type: AWS::EC2::Instance
        Properties:
            AvailabilityZone: eu-central-1a
            KeyName: !Ref SSHKey
            InstanceType: t2.micro
            SecurityGroupIds: [!Ref PublicSecurityGroup]
            ImageId: ami-97e953f8  # ubuntu 16.04 in eu-central-1
            UserData:
                Fn::Base64: !Sub |
                  #!/bin/bash -e
                  apt-get update
                  apt-get -y install nginx-light
                  echo "<h1>Hi, my name is $HOSTNAME@${AWS::Region}</h1>" > /var/www/html/index.html
            Tags:
            - Key: Name
              Value:
                Fn::Join: # fn.join('-', [stackname, staticfileserver])
                - "-"
                - - !Ref AWS::StackName
                  - StaticFilesServer

    MyInstance2:
        Type: AWS::EC2::Instance
        Properties:
            AvailabilityZone: eu-central-1b
            KeyName: !Ref SSHKey
            InstanceType: t2.micro
            SecurityGroupIds: [!Ref PublicSecurityGroup]
            ImageId: ami-97e953f8  # ubuntu 16.04 in eu-central-1
            UserData:
                Fn::Base64: !Sub |
                  #!/bin/bash -e
                  apt-get update
                  apt-get -y install nginx-light
                  echo "<h1>Hi, my name is $HOSTNAME@${AWS::Region}</h1>" > /var/www/html/index.html
            Tags:
            - Key: Name
              Value:
                Fn::Join: # fn.join('-', [stackname, staticfileserver])
                - "-"
                - - !Ref AWS::StackName
                  - StaticFilesServer

    MyLoadBalancer:
        Type: AWS::ElasticLoadBalancing::LoadBalancer
        Properties:
            AvailabilityZones: [eu-central-1a, eu-central-1b]
            CrossZone: true
            Instances:
                - !Ref MyInstance1
                - !Ref MyInstance2
            Listeners:
                - LoadBalancerPort: 80
                  InstancePort: 80
                  Protocol: HTTP
            HealthCheck:
                Target: HTTP:80/
                HealthyThreshold: 2  # how many successful checks before marking an instance as healthy
                UnhealthyThreshold: 5  # how many unsuccessful checks before marking an instance as unhealthy
                Interval: 5  # time between checks
                Timeout: 2  # checks response timeout

Outputs:
    WebserverPublicIp:
        Description: Public IP of our Load Balancer.
        Value: !GetAtt MyLoadBalancer.DNSName  # this can take a few minutes to propagate

